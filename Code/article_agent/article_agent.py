import os
from dotenv import load_dotenv
from typing import Optional, List
import wikipediaapi
from langchain_huggingface import ChatHuggingFace, HuggingFaceEndpoint
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_community.retrievers import WikipediaRetriever
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough

class ArticleAgent:
    def __init__(self, repo_id: str = "HuggingFaceH4/zephyr-7b-beta", task: str = "text-generation", max_new_tokens: int = 1024, 
                 do_sample: bool = False, repetition_penalty: float = 1.03, 
                 user_agent: str = "MyArticleAgent/1.0 (http://mywebsite.com; contact@myemail.com)"):
        # Load environment variables from .env file
        load_dotenv()

        # Get the Hugging Face token from the environment variables
        self.hf_token: Optional[str] = os.getenv("HUGGING_FACE_TOKEN")

        # Initialize the language model
        self.llm = HuggingFaceEndpoint(
            repo_id=repo_id,
            task=task,
            max_new_tokens=max_new_tokens,
            do_sample=do_sample,
            repetition_penalty=repetition_penalty,
        )
        
        # Initialize the chat model
        self.chat_model = ChatHuggingFace(llm=self.llm)

        # Initialize the Wikipedia retriever
        self.retriever = WikipediaRetriever()

    def get_information_with_wikipedia(self, task: str, instruction: str = "Perform the task based only on the context provided.") -> str:
        """
        Get information based on the task and instruction provided, using the Wikipedia retriever as the context.

        Args:
            task (str): The task to be performed.
            instruction (str): The instruction to be displayed to the model.

        Returns:
            str: The answer generated by the model.
        """
        
        prompt = ChatPromptTemplate.from_template(
            f"""
            {instruction}
            Context: {{context}}
            Task: {{task}}
            """
        )

        def format_docs(docs):
            return "\n\n".join(doc.page_content for doc in docs)

        # Define the processing chain
        chain = (
            {"context": self.retriever | format_docs, "task": RunnablePassthrough()}
            | prompt
            | self.llm
            | StrOutputParser()
        )

        # Generate the answer
        return chain.invoke(task)
    
    def get_information(self, context: str, instruction: str) -> str:
        """
        Get information based on the task and instruction provided.

        Args:
            context (str): The context to be used for generating the answer.
            instruction (str): The instruction to be displayed to the model.

        Returns:
            str: The answer generated by the model.
        """
        
        prompt = ChatPromptTemplate.from_template(
            f"""
            {instruction}
            Context: {{context}}
            """
        )

        # Define the processing chain
        chain = (
            {"context": RunnablePassthrough()}
            | prompt
            | self.llm
            | StrOutputParser()
        )

        # Generate the answer
        return chain.invoke(context)


def create_paragraphs(tasks: List[str], instruction: str, agent: ArticleAgent) -> List[str]:
    """
    Create paragraphs for the given tasks.

    Args:
        tasks (List[str]): The list of tasks for which paragraphs need to be created.

    Returns:
        List[str]: The list of paragraphs created for the given tasks.
    """
    paragraphs = []
    for task in tasks:
        paragraph = agent.get_information_with_wikipedia(task=task, instruction=instruction)
        paragraphs.append(paragraph)
    return paragraphs

def create_image_descriptions(paragraphs: List[str], agent: ArticleAgent) -> List[str]:
    """
    Create descriptions for the given images based on a string.

    Args:
        paragraphs (List[str]): The list of paragraphs based on which the image descriptions need to be created.

    Returns:
        List[str]: The list of image descriptions created for the given paragraphs.
    """
    image_descriptions = []
    for paragraph in paragraphs:
        # for a diffusion model, create the description of the image based on the paragraph
        image_description = agent.get_information(context=paragraph, instruction="Create a description of an image based on the context provided. Only describe the image.")
        print('\nNew Image Description')
        print("=" * 50)
        print(image_description)
        image_descriptions.append(image_description)
    return image_descriptions

def create_image_subtitles(descriptions: List[str], agent: ArticleAgent) -> List[str]:
    """
    Create image subtitles based on image descriptions

    Args:
        descriptions (List[str]): The list of paragraphs based on which the image descriptions need to be created.

    Returns:
        List[str]: The list of image descriptions created for the given paragraphs.
    """
    image_descriptions = []
    for description in descriptions:
        # for a diffusion model, create the description of the image based on the paragraph
        image_description = agent.get_information(context=description, instruction="Create a subtitle for an image based on the image description provided in the context. Only give me the subtitle.")
        print('\nNew Image Subtitle')
        print("=" * 50)
        print(image_description)
        image_descriptions.append(image_description)
    return image_descriptions

if __name__ == "__main__":
    agent = ArticleAgent()
    brand = 'BMW'
    tasks = [
        f"Write a introductory paragraph about {brand}.",
        f"Descibe a new car offered by {brand}.",
        f"Explain the history of {brand}.",
        f"Discuss the innovations of the car {brand}."
    ]
    instruction = "Write a sensational paragraph for an advertisement about a car brand based on the information provided."
    paragraphs = create_paragraphs(tasks=tasks, instruction=instruction, agent=agent)
    for i, paragraph in enumerate(paragraphs):
        print(f"Task {i + 1}: {tasks[i]}\n")
        print(paragraph)
        print("\n" + "=" * 50 + "\n")

    image_descriptions = create_image_descriptions(paragraphs=paragraphs, agent=agent)
    subtitles = create_image_subtitles(descriptions=image_descriptions, agent=agent)
    
    


